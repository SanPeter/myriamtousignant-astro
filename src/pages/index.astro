---
import BaseLayout from '../layouts/BaseLayout.astro';
import { Image } from 'astro:assets';
import { getCollection } from 'astro:content';

// Importer les collections
const projets = await getCollection('projets', ({ data }) => {
  return !data.draft && data.featured;
}).then(items => items.sort((a, b) => {
  if (!a.data.date || !b.data.date) return 0;
  return b.data.date.valueOf() - a.data.date.valueOf();
}));

const expositions = await getCollection('expositions', ({ data }) => {
  return !data.draft;
}).then(items => items.sort((a, b) => {
  // Si startDate est disponible, l'utiliser (spécifique aux expositions)
  if (a.data.startDate && b.data.startDate) {
    return b.data.startDate.valueOf() - a.data.startDate.valueOf();
  }
  // Sinon utiliser date normale
  if (!a.data.date || !b.data.date) return 0;
  return b.data.date.valueOf() - a.data.date.valueOf();
}));

const mediations = await getCollection('mediations', ({ data }) => {
  return !data.draft;
}).then(items => items.sort((a, b) => {
  if (!a.data.date || !b.data.date) return 0;
  return b.data.date.valueOf() - a.data.date.valueOf();
}));

// Importer toutes les images des collections dynamiquement
const contentImages = import.meta.glob([
  '../content/projets/**/*.{jpeg,jpg,png,gif,webp,JPG,JPEG,PNG,GIF,WEBP}',
  '../content/expositions/**/*.{jpeg,jpg,png,gif,webp,JPG,JPEG,PNG,GIF,WEBP}',
  '../content/mediations/**/*.{jpeg,jpg,png,gif,webp,JPG,JPEG,PNG,GIF,WEBP}'
]);

// Fonction pour résoudre le chemin de l'image
async function resolveContentImage(collection: string, slug: string, imagePath: string) {
  if (!imagePath) return null;

  // Si le chemin commence par / ou http, on le retourne tel quel (pour les URLs externes)
  if (imagePath.startsWith('/') || imagePath.startsWith('http')) {
    return { type: 'url', value: imagePath };
  }

  try {
    // Construire différentes variations potentielles du chemin de l'image
    const possiblePaths = [
      `../content/${collection}/${slug}/${imagePath}`,
      `../content/${collection}/${slug}/images/${imagePath.split('/').pop() || ''}`,
    ];
    
    // Rechercher l'image dans les chemins possibles
    for (const path of possiblePaths) {
      if (path in contentImages) {
        // Charger l'image dynamiquement
        const imageModule = await contentImages[path]();
        if (imageModule && (imageModule as { default: string }).default) {
          return { type: 'import', value: (imageModule as { default: string }).default };
        }
      }
    }
    
    console.warn(`Image non trouvée: ${imagePath} pour ${collection}/${slug}`);
    return { type: 'url', value: imagePath };
  } catch (error) {
    console.error(`Erreur lors du chargement de l'image ${imagePath}:`, error);
    return { type: 'url', value: imagePath };
  }
}

// Préparer les données avec les images résolues
const projetsWithImages = await Promise.all(
  projets.slice(0, 3).map(async (projet) => {
    const image = projet.data.summaryImage 
      ? await resolveContentImage('projets', projet.id.replace(/\.md$/, ''), projet.data.summaryImage)
      : null;
    return { ...projet, resolvedImage: image };
  })
);

const expositionsWithImages = await Promise.all(
  expositions.slice(0, 3).map(async (expo) => {
    const image = expo.data.summaryImage 
      ? await resolveContentImage('expositions', expo.id.replace(/\.md$/, ''), expo.data.summaryImage)
      : null;
    return { ...expo, resolvedImage: image };
  })
);

const mediationsWithImages = await Promise.all(
  mediations.slice(0, 2).map(async (art) => {
    const image = art.data.summaryImage 
      ? await resolveContentImage('mediations', art.id.replace(/\.md$/, ''), art.data.summaryImage)
      : null;
    return { ...art, resolvedImage: image };
  })
);
---

<BaseLayout title="Accueil">
  <!-- Hero Section -->
  <section class="relative">
    <div class="bg-gradient-to-r from-gray-100 to-gray-200 h-96 flex items-center">
      <div class="container mx-auto px-6">
        <h1 class="text-4xl md:text-5xl font-bold text-gray-800 leading-tight">
          Myriam Tousignant
        </h1>
        <p class="text-xl md:text-2xl text-gray-700 mt-4 max-w-2xl">
          Artiste multidisciplinaire | Arts visuels, art public, installations, livres d'artiste et médiations culturelles
        </p>
        <div class="mt-8">
          <a href="/biographie-demarche" class="bg-gray-800 text-white hover:bg-gray-700 py-3 px-6 rounded-md font-semibold transition-colors">
            Découvrir ma démarche
          </a>
        </div>
      </div>
    </div>
  </section>
  
  <!-- Projets Récents -->
  <section class="py-12 bg-gray-50">
    <div class="container mx-auto px-6">
      <div class="flex flex-col items-start md:flex-row md:justify-between md:items-center mb-8">
        <h2 class="text-3xl font-bold">Projets en vedette</h2>
        <a href="/projets" class="text-blue-600 hover:underline inline-flex items-center mt-2 md:mt-0">
          Tous les projets
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </a>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {projetsWithImages.map(projet => (
          <a href={`/projets/${projet.id.replace(/\.md$/, '')}`} class="bg-white rounded-lg shadow hover:shadow-md transition-shadow duration-200 overflow-hidden">
            {projet.resolvedImage && (
              <div class="w-full h-48 overflow-hidden">
                {projet.resolvedImage.type === 'import' ? (
                  <Image 
                    src={projet.resolvedImage.value} 
                    alt={projet.data.title} 
                    width={400}
                    height={300}
                    class="w-full h-full object-cover"
                  />
                ) : (
                  <img 
                    src={projet.resolvedImage.value} 
                    alt={projet.data.title} 
                    width="400"
                    height="300"
                    class="w-full h-full object-cover"
                  />
                )}
              </div>
            )}
            <div class="p-4">
              <h3 class="text-xl font-semibold">{projet.data.title}</h3>
              {projet.data.description && (
                <p class="mt-2 text-gray-600 line-clamp-2">{projet.data.description}</p>
              )}
            </div>
          </a>
        ))}
      </div>
    </div>
  </section>
  
  <!-- Mediations -->
  {mediationsWithImages.length > 0 && (
    <section class="py-12 bg-white">
      <div class="container mx-auto px-6">
        <div class="flex flex-col items-start md:flex-row md:justify-between md:items-center mb-8">
          <h2 class="text-3xl font-bold">Mediations récentes</h2>
          <a href="/mediations" class="text-blue-600 hover:underline inline-flex items-center mt-2 md:mt-0">
            Voir toutes les médiations
            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
              <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
            </svg>
          </a>
        </div>
        
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {mediationsWithImages.map(mediation => (
            <a href={`/mediations/${mediation.id.replace(/\.md$/, '')}`} class="bg-white rounded-lg shadow hover:shadow-lg transition-shadow duration-200 overflow-hidden">
              <div class="flex flex-col md:flex-row">
                {mediation.resolvedImage && (
                  <div class="md:w-2/5">
                    {mediation.resolvedImage.type === 'import' ? (
                      <Image 
                        src={mediation.resolvedImage.value} 
                        alt={mediation.data.title} 
                        width={400}
                        height={300}
                        class="w-full h-full object-cover"
                      />
                    ) : (
                      <img 
                        src={mediation.resolvedImage.value} 
                        alt={mediation.data.title} 
                        width="400"
                        height="300"
                        class="w-full h-full object-cover"
                      />
                    )}
                  </div>
                )}
                <div class="p-6 md:w-3/5">
                  <h3 class="text-xl font-semibold">{mediation.data.title}</h3>
                  {mediation.data.description && (
                    <p class="mt-2 text-gray-600">{mediation.data.description}</p>
                  )}
                  <div class="mt-4">
                    <span class="inline-flex items-center text-blue-600">
                      En savoir plus
                      <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
                      </svg>
                    </span>
                  </div>
                </div>
              </div>
            </a>
          ))}
        </div>
      </div>
    </section>
  )}


  <!-- Expositions -->
  <section class="py-12 bg-gray-50">
    <div class="container mx-auto px-6">
      <div class="flex flex-col items-start md:flex-row md:justify-between md:items-center mb-8">
        <h2 class="text-3xl font-bold">Expositions récentes</h2>
        <a href="/expositions" class="text-blue-600 hover:underline inline-flex items-center mt-2 md:mt-0">
          Toutes les expositions
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 ml-1" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10.293 5.293a1 1 0 011.414 0l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414-1.414L12.586 11H5a1 1 0 110-2h7.586l-2.293-2.293a1 1 0 010-1.414z" clip-rule="evenodd" />
          </svg>
        </a>
      </div>
      
      <div class="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        {expositionsWithImages.map(expo => (
          <a href={`/expositions/${expo.id.replace(/\.md$/, '')}`} class="bg-white rounded-lg shadow hover:shadow-lg transition-shadow duration-200 overflow-hidden">
            {expo.resolvedImage && (
              <div class="w-full h-48 overflow-hidden">
                {expo.resolvedImage.type === 'import' ? (
                  <Image 
                    src={expo.resolvedImage.value} 
                    alt={expo.data.title} 
                    width={400}
                    height={300}
                    class="w-full h-full object-cover"
                  />
                ) : (
                  <img 
                    src={expo.resolvedImage.value} 
                    alt={expo.data.title} 
                    width="400"
                    height="300"
                    class="w-full h-full object-cover"
                  />
                )}
              </div>
            )}
            <div class="p-4">
              <h3 class="text-xl font-semibold">{expo.data.title}</h3>
              {expo.data.location && (
                <p class="text-sm text-gray-600 mt-1">{expo.data.location}</p>
              )}
              {expo.data.startDate && (
                <p class="text-sm text-gray-600">
                  {expo.data.startDate.toLocaleDateString('fr-CA')}
                  {expo.data.endDate && ` au ${expo.data.endDate.toLocaleDateString('fr-CA')}`}
                </p>
              )}
            </div>
          </a>
        ))}
      </div>
    </div>
  </section>
  
  
  <!-- Call to Action -->
  <section class="py-16 bg-slate-400 text-white mb-16">
    <div class="container mx-auto px-6 text-center">
      <h2 class="text-3xl font-bold mb-4">Vous avez un projet artistique?</h2>
      <p class="text-xl mb-8 max-w-2xl mx-auto">
        Contactez-moi pour discuter de collaborations, acquisitions ou médiations culturelles.
      </p>
      <a 
        href="https://www.instagram.com/myriamtousignant_art/" 
        class="bg-white text-blue-600 hover:bg-gray-100 py-3 px-8 rounded-md font-semibold text-lg inline-block transition-colors"
      >
        Écrivez-moi
      </a>
    </div>
  </section>
</BaseLayout>