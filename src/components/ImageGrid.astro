---
import { Image } from 'astro:assets';
import type { ImageMetadata } from 'astro';

interface Props {
  match: string;
  sortOrder?: 'asc' | 'desc';
  rowHeight?: number;
  margins?: number;
  thumbnailResizeOptions?: string;
  showExif?: boolean;
  previewType?: 'blur' | 'color';
  embedPreview?: boolean;
  thumbnailHoverEffect?: string;
  collectionName?: string;
  slug?: string;
  lightboxWidth?: number;
  lightboxHeight?: number;
}

const {
  match,
  sortOrder = 'asc',
  rowHeight = 200,
  margins = 10,
  thumbnailResizeOptions,
  showExif = false,
  previewType = 'blur',
  embedPreview = true,
  thumbnailHoverEffect = 'none',
  collectionName,
  slug,
  lightboxWidth = 1200,
  lightboxHeight = 800,
} = Astro.props;

// Déterminer le chemin de collection et le slug à partir de l'URL si non fournis
const pathname = Astro.url.pathname;
const parts = pathname.split('/').filter(Boolean);
const actualCollectionName = collectionName || parts[0] || '';
const actualSlug = slug || parts[1] || '';

// Extraire le pattern de nom de fichier du paramètre match
const matchPattern = match.split('/').pop() || '';
const baseDir = match.split('/').slice(0, -1).join('/');

// Importer toutes les images potentielles à partir des chemins
const imageGlob = import.meta.glob<{ default: ImageMetadata }>([
  '../content/**/*.{jpeg,jpg,png,gif,webp,JPG,JPEG,PNG,GIF,WEBP}'
]);

// Fonction pour trouver les images correspondant au pattern
async function findMatchingImages(): Promise<ImageMetadata[]> {
  const images: ImageMetadata[] = [];
  const pattern = new RegExp(
    matchPattern.replace('*', '.*').replace('.', '\\.'),
    'i'
  );
  
  // Construire le chemin de base pour chercher les images
  const basePath = `../content/${actualCollectionName}/${actualSlug}/${baseDir}`;
  
  for (const [path, importFunc] of Object.entries(imageGlob)) {
    if (path.startsWith(basePath) && pattern.test(path)) {
      const imageModule = await importFunc();
      images.push(imageModule.default);
    }
  }
  
  // Trier les images selon sortOrder
  return images.sort((a, b) => {
    const pathA = (a as any).src || '';
    const pathB = (b as any).src || '';
    return sortOrder === 'asc'
      ? pathA.localeCompare(pathB)
      : pathB.localeCompare(pathA);
  });
}

// Récupérer les images
const images = await findMatchingImages();

// Définir des dimensions standards pour toutes les images
const standardHeight = rowHeight; // Utiliser la hauteur de ligne comme hauteur standard
const standardWidth = 300; // Largeur fixe pour toutes les images
const gridGap = margins; // Utiliser la valeur des marges pour l'espacement
---

<div class="w-full overflow-hidden">
  {images.length === 0 ? (
    <div class="p-5 text-center text-gray-500">
      Aucune image ne correspond au pattern "{match}"
    </div>
  ) : (
    <div class="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4" style={`gap: ${gridGap}px;`}>
      {images.map((image, index) => (
        <div 
          class="aspect-w-3 aspect-h-2 overflow-hidden rounded-md shadow-sm"
        >
          <a 
            href="#" 
            class="block w-full h-full"
            data-index={index}
            data-original-width={image.width}
            data-original-height={image.height}
            data-original-src={image.src}
          >
            <Image
              src={image}
              alt={`Image ${index + 1}`}
              width={standardWidth}
              height={standardHeight}
              class="w-full h-full object-cover transition-transform duration-300 hover:scale-105"
            />
            {showExif && (
              <div class="absolute bottom-0 left-0 right-0 bg-black/60 text-white p-2 text-xs">
                {/* Exif info would go here if available */}
              </div>
            )}
          </a>
        </div>
      ))}
    </div>
  )}
  
  {/* Lightbox component for image preview */}
  <div id="lightbox" class="fixed inset-0 z-50 hidden bg-black/90 transition-opacity duration-300">
    <div class="relative w-full h-full flex justify-center items-center">
      <button class="absolute top-4 right-4 text-white text-3xl cursor-pointer z-10 hover:text-gray-300 lightbox-close">
        &times;
      </button>
      <div class="max-w-[95%] max-h-[95%]">
        <div id="lightbox-loader" class="hidden absolute top-1/2 left-1/2 transform -translate-x-1/2 -translate-y-1/2">
          <div class="w-12 h-12 border-4 border-white border-t-transparent rounded-full animate-spin"></div>
        </div>
        <img id="lightbox-image" class="max-w-full max-h-[95vh] object-contain transition-opacity duration-300" />
      </div>
      <button class="absolute top-1/2 left-4 transform -translate-y-1/2 bg-black/50 text-white border-none text-2xl p-3 cursor-pointer hover:bg-black/70 rounded lightbox-prev">
        &lt;
      </button>
      <button class="absolute top-1/2 right-4 transform -translate-y-1/2 bg-black/50 text-white border-none text-2xl p-3 cursor-pointer hover:bg-black/70 rounded lightbox-next">
        &gt;
      </button>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const lightbox = document.getElementById('lightbox');
    const lightboxImage = document.getElementById('lightbox-image') as HTMLImageElement;
    const lightboxLoader = document.getElementById('lightbox-loader');
    const lightboxClose = document.querySelector('.lightbox-close');
    const lightboxPrev = document.querySelector('.lightbox-prev');
    const lightboxNext = document.querySelector('.lightbox-next');
    const triggers = document.querySelectorAll('a[data-index]');
    
    if (!lightbox || !lightboxImage) return;
    
    let currentIndex = 0;
    const imagesCount = triggers.length;
    
    // Fonction pour ouvrir le lightbox
    function openLightbox(index: number) {
      if (!lightbox || !lightboxImage || !lightboxLoader) return;
      
      currentIndex = index;
      const trigger = triggers[index];
      const originalSrc = trigger?.getAttribute('data-original-src') || trigger?.querySelector('img')?.getAttribute('src');
      
      if (originalSrc) {
        // Afficher le loader pendant le chargement
        lightboxLoader.classList.remove('hidden');
        lightboxImage.style.opacity = '0';
        
        // Précharger l'image pour avoir la transition fluide
        lightboxImage.onload = () => {
          lightboxLoader.classList.add('hidden');
          lightboxImage.style.opacity = '1';
        };
        
        lightboxImage.onerror = () => {
          lightboxLoader.classList.add('hidden');
          lightboxImage.style.opacity = '1';
        };
        
        // Définir la source de l'image
        lightboxImage.setAttribute('src', originalSrc);
        lightbox.classList.remove('hidden');
        document.body.style.overflow = 'hidden';
      }
    }
    
    // Fonction pour fermer le lightbox
    function closeLightbox() {
      if (!lightbox) return;
      lightbox.classList.add('hidden');
      document.body.style.overflow = '';
    }
    
    // Fonction pour naviguer au précédent
    function prevImage() {
      currentIndex = (currentIndex - 1 + imagesCount) % imagesCount;
      openLightbox(currentIndex);
    }
    
    // Fonction pour naviguer au suivant
    function nextImage() {
      currentIndex = (currentIndex + 1) % imagesCount;
      openLightbox(currentIndex);
    }
    
    // Ajouter les gestionnaires d'événements
    triggers.forEach((trigger, index) => {
      trigger.addEventListener('click', (e) => {
        e.preventDefault();
        openLightbox(index);
      });
    });
    
    lightboxClose?.addEventListener('click', closeLightbox);
    lightboxPrev?.addEventListener('click', prevImage);
    lightboxNext?.addEventListener('click', nextImage);
    
    // Fermer aussi quand on clique en dehors de l'image
    lightbox.addEventListener('click', (e) => {
      if (e.target === lightbox) {
        closeLightbox();
      }
    });
    
    // Prise en charge du clavier
    document.addEventListener('keydown', (e) => {
      if (lightbox?.classList.contains('hidden')) return;
      
      switch (e.key) {
        case 'Escape':
          closeLightbox();
          break;
        case 'ArrowLeft':
          prevImage();
          break;
        case 'ArrowRight':
          nextImage();
          break;
      }
    });
  });
</script>
